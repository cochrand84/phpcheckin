<?php
/**
 * DeliveryInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PHP Point Of Sale API
 *
 * PHP Point Of Sale API  You can find out more about PHP POS at [https://phppointofsale.com](https://phppointofsale.com)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@phppointofsale.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DeliveryInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DeliveryInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeliveryInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'is_pickup' => 'bool',
        'comment' => 'string',
        'shipping_method_id' => 'int',
        'shipping_zone_id' => 'int',
        'tracking_number' => 'string',
        'estimated_shipping_date' => '\DateTime',
        'estimated_delivery_or_pickup_date' => '\DateTime',
        'actual_delivery_or_pickup_date' => '\DateTime',
        'actual_shipping_date' => '\DateTime',
        'delivery_employee_person_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'status' => null,
        'is_pickup' => null,
        'comment' => null,
        'shipping_method_id' => null,
        'shipping_zone_id' => null,
        'tracking_number' => null,
        'estimated_shipping_date' => 'date-time',
        'estimated_delivery_or_pickup_date' => 'date-time',
        'actual_delivery_or_pickup_date' => 'date-time',
        'actual_shipping_date' => 'date-time',
        'delivery_employee_person_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'is_pickup' => 'is_pickup',
        'comment' => 'comment',
        'shipping_method_id' => 'shipping_method_id',
        'shipping_zone_id' => 'shipping_zone_id',
        'tracking_number' => 'tracking_number',
        'estimated_shipping_date' => 'estimated_shipping_date',
        'estimated_delivery_or_pickup_date' => 'estimated_delivery_or_pickup_date',
        'actual_delivery_or_pickup_date' => 'actual_delivery_or_pickup_date',
        'actual_shipping_date' => 'actual_shipping_date',
        'delivery_employee_person_id' => 'delivery_employee_person_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'is_pickup' => 'setIsPickup',
        'comment' => 'setComment',
        'shipping_method_id' => 'setShippingMethodId',
        'shipping_zone_id' => 'setShippingZoneId',
        'tracking_number' => 'setTrackingNumber',
        'estimated_shipping_date' => 'setEstimatedShippingDate',
        'estimated_delivery_or_pickup_date' => 'setEstimatedDeliveryOrPickupDate',
        'actual_delivery_or_pickup_date' => 'setActualDeliveryOrPickupDate',
        'actual_shipping_date' => 'setActualShippingDate',
        'delivery_employee_person_id' => 'setDeliveryEmployeePersonId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'is_pickup' => 'getIsPickup',
        'comment' => 'getComment',
        'shipping_method_id' => 'getShippingMethodId',
        'shipping_zone_id' => 'getShippingZoneId',
        'tracking_number' => 'getTrackingNumber',
        'estimated_shipping_date' => 'getEstimatedShippingDate',
        'estimated_delivery_or_pickup_date' => 'getEstimatedDeliveryOrPickupDate',
        'actual_delivery_or_pickup_date' => 'getActualDeliveryOrPickupDate',
        'actual_shipping_date' => 'getActualShippingDate',
        'delivery_employee_person_id' => 'getDeliveryEmployeePersonId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_COMPLETED = 'completed';
    const STATUS_NOT_SCHEDULED = 'not_scheduled';
    const STATUS_SCHEDULED = 'scheduled';
    const STATUS_SHIPPED = 'shipped';
    const STATUS_DELIVERED = 'delivered';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_COMPLETED,
            self::STATUS_NOT_SCHEDULED,
            self::STATUS_SCHEDULED,
            self::STATUS_SHIPPED,
            self::STATUS_DELIVERED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['is_pickup'] = isset($data['is_pickup']) ? $data['is_pickup'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['shipping_method_id'] = isset($data['shipping_method_id']) ? $data['shipping_method_id'] : null;
        $this->container['shipping_zone_id'] = isset($data['shipping_zone_id']) ? $data['shipping_zone_id'] : null;
        $this->container['tracking_number'] = isset($data['tracking_number']) ? $data['tracking_number'] : null;
        $this->container['estimated_shipping_date'] = isset($data['estimated_shipping_date']) ? $data['estimated_shipping_date'] : null;
        $this->container['estimated_delivery_or_pickup_date'] = isset($data['estimated_delivery_or_pickup_date']) ? $data['estimated_delivery_or_pickup_date'] : null;
        $this->container['actual_delivery_or_pickup_date'] = isset($data['actual_delivery_or_pickup_date']) ? $data['actual_delivery_or_pickup_date'] : null;
        $this->container['actual_shipping_date'] = isset($data['actual_shipping_date']) ? $data['actual_shipping_date'] : null;
        $this->container['delivery_employee_person_id'] = isset($data['delivery_employee_person_id']) ? $data['delivery_employee_person_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_pickup
     *
     * @return bool|null
     */
    public function getIsPickup()
    {
        return $this->container['is_pickup'];
    }

    /**
     * Sets is_pickup
     *
     * @param bool|null $is_pickup is_pickup
     *
     * @return $this
     */
    public function setIsPickup($is_pickup)
    {
        $this->container['is_pickup'] = $is_pickup;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets shipping_method_id
     *
     * @return int|null
     */
    public function getShippingMethodId()
    {
        return $this->container['shipping_method_id'];
    }

    /**
     * Sets shipping_method_id
     *
     * @param int|null $shipping_method_id shipping_method_id
     *
     * @return $this
     */
    public function setShippingMethodId($shipping_method_id)
    {
        $this->container['shipping_method_id'] = $shipping_method_id;

        return $this;
    }

    /**
     * Gets shipping_zone_id
     *
     * @return int|null
     */
    public function getShippingZoneId()
    {
        return $this->container['shipping_zone_id'];
    }

    /**
     * Sets shipping_zone_id
     *
     * @param int|null $shipping_zone_id shipping_zone_id
     *
     * @return $this
     */
    public function setShippingZoneId($shipping_zone_id)
    {
        $this->container['shipping_zone_id'] = $shipping_zone_id;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string|null $tracking_number tracking_number
     *
     * @return $this
     */
    public function setTrackingNumber($tracking_number)
    {
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets estimated_shipping_date
     *
     * @return \DateTime|null
     */
    public function getEstimatedShippingDate()
    {
        return $this->container['estimated_shipping_date'];
    }

    /**
     * Sets estimated_shipping_date
     *
     * @param \DateTime|null $estimated_shipping_date estimated_shipping_date
     *
     * @return $this
     */
    public function setEstimatedShippingDate($estimated_shipping_date)
    {
        $this->container['estimated_shipping_date'] = $estimated_shipping_date;

        return $this;
    }

    /**
     * Gets estimated_delivery_or_pickup_date
     *
     * @return \DateTime|null
     */
    public function getEstimatedDeliveryOrPickupDate()
    {
        return $this->container['estimated_delivery_or_pickup_date'];
    }

    /**
     * Sets estimated_delivery_or_pickup_date
     *
     * @param \DateTime|null $estimated_delivery_or_pickup_date estimated_delivery_or_pickup_date
     *
     * @return $this
     */
    public function setEstimatedDeliveryOrPickupDate($estimated_delivery_or_pickup_date)
    {
        $this->container['estimated_delivery_or_pickup_date'] = $estimated_delivery_or_pickup_date;

        return $this;
    }

    /**
     * Gets actual_delivery_or_pickup_date
     *
     * @return \DateTime|null
     */
    public function getActualDeliveryOrPickupDate()
    {
        return $this->container['actual_delivery_or_pickup_date'];
    }

    /**
     * Sets actual_delivery_or_pickup_date
     *
     * @param \DateTime|null $actual_delivery_or_pickup_date actual_delivery_or_pickup_date
     *
     * @return $this
     */
    public function setActualDeliveryOrPickupDate($actual_delivery_or_pickup_date)
    {
        $this->container['actual_delivery_or_pickup_date'] = $actual_delivery_or_pickup_date;

        return $this;
    }

    /**
     * Gets actual_shipping_date
     *
     * @return \DateTime|null
     */
    public function getActualShippingDate()
    {
        return $this->container['actual_shipping_date'];
    }

    /**
     * Sets actual_shipping_date
     *
     * @param \DateTime|null $actual_shipping_date actual_shipping_date
     *
     * @return $this
     */
    public function setActualShippingDate($actual_shipping_date)
    {
        $this->container['actual_shipping_date'] = $actual_shipping_date;

        return $this;
    }

    /**
     * Gets delivery_employee_person_id
     *
     * @return int|null
     */
    public function getDeliveryEmployeePersonId()
    {
        return $this->container['delivery_employee_person_id'];
    }

    /**
     * Sets delivery_employee_person_id
     *
     * @param int|null $delivery_employee_person_id delivery_employee_person_id
     *
     * @return $this
     */
    public function setDeliveryEmployeePersonId($delivery_employee_person_id)
    {
        $this->container['delivery_employee_person_id'] = $delivery_employee_person_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}



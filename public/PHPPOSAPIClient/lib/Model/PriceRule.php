<?php
/**
 * PriceRule
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PHP Point Of Sale API
 *
 * PHP Point Of Sale API  You can find out more about PHP POS at [https://phppointofsale.com](https://phppointofsale.com)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@phppointofsale.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PriceRule Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PriceRule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PriceRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'type' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'active' => 'bool',
        'items_to_buy' => 'int',
        'items_to_get' => 'int',
        'percent_off' => 'float',
        'fixed_off' => 'float',
        'spend_amount' => 'float',
        'num_times_to_apply' => 'int',
        'coupon_code' => 'string',
        'description' => 'string',
        'coupon_spend_amount' => 'float',
        'show_on_receipt' => 'bool',
        'item_ids' => 'int[]',
        'item_kit_ids' => 'int[]',
        'tags' => 'string[]',
        'category_ids' => 'int[]',
        'manufacturer_ids' => 'int[]',
        'price_breaks' => '\OpenAPI\Client\Model\PriceRulePriceBreak[]',
        'location_ids' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'type' => null,
        'start_date' => 'date',
        'end_date' => 'date',
        'active' => null,
        'items_to_buy' => null,
        'items_to_get' => null,
        'percent_off' => 'float',
        'fixed_off' => 'float',
        'spend_amount' => 'float',
        'num_times_to_apply' => null,
        'coupon_code' => null,
        'description' => null,
        'coupon_spend_amount' => 'float',
        'show_on_receipt' => null,
        'item_ids' => null,
        'item_kit_ids' => null,
        'tags' => null,
        'category_ids' => null,
        'manufacturer_ids' => null,
        'price_breaks' => null,
        'location_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'active' => 'active',
        'items_to_buy' => 'items_to_buy',
        'items_to_get' => 'items_to_get',
        'percent_off' => 'percent_off',
        'fixed_off' => 'fixed_off',
        'spend_amount' => 'spend_amount',
        'num_times_to_apply' => 'num_times_to_apply',
        'coupon_code' => 'coupon_code',
        'description' => 'description',
        'coupon_spend_amount' => 'coupon_spend_amount',
        'show_on_receipt' => 'show_on_receipt',
        'item_ids' => 'item_ids',
        'item_kit_ids' => 'item_kit_ids',
        'tags' => 'tags',
        'category_ids' => 'category_ids',
        'manufacturer_ids' => 'manufacturer_ids',
        'price_breaks' => 'price_breaks',
        'location_ids' => 'location_ids'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'active' => 'setActive',
        'items_to_buy' => 'setItemsToBuy',
        'items_to_get' => 'setItemsToGet',
        'percent_off' => 'setPercentOff',
        'fixed_off' => 'setFixedOff',
        'spend_amount' => 'setSpendAmount',
        'num_times_to_apply' => 'setNumTimesToApply',
        'coupon_code' => 'setCouponCode',
        'description' => 'setDescription',
        'coupon_spend_amount' => 'setCouponSpendAmount',
        'show_on_receipt' => 'setShowOnReceipt',
        'item_ids' => 'setItemIds',
        'item_kit_ids' => 'setItemKitIds',
        'tags' => 'setTags',
        'category_ids' => 'setCategoryIds',
        'manufacturer_ids' => 'setManufacturerIds',
        'price_breaks' => 'setPriceBreaks',
        'location_ids' => 'setLocationIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'active' => 'getActive',
        'items_to_buy' => 'getItemsToBuy',
        'items_to_get' => 'getItemsToGet',
        'percent_off' => 'getPercentOff',
        'fixed_off' => 'getFixedOff',
        'spend_amount' => 'getSpendAmount',
        'num_times_to_apply' => 'getNumTimesToApply',
        'coupon_code' => 'getCouponCode',
        'description' => 'getDescription',
        'coupon_spend_amount' => 'getCouponSpendAmount',
        'show_on_receipt' => 'getShowOnReceipt',
        'item_ids' => 'getItemIds',
        'item_kit_ids' => 'getItemKitIds',
        'tags' => 'getTags',
        'category_ids' => 'getCategoryIds',
        'manufacturer_ids' => 'getManufacturerIds',
        'price_breaks' => 'getPriceBreaks',
        'location_ids' => 'getLocationIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_SPEND_X_GET_DISCOUNT = 'spend_x_get_discount';
    const TYPE_SIMPLE_DISCOUNT = 'simple_discount';
    const TYPE_ADVANCED_DISCOUNT = 'advanced_discount';
    const TYPE_BUY_X_GET_Y_FREE = 'buy_x_get_y_free';
    const TYPE_BUY_X_GET_DISCOUNT = 'buy_x_get_discount';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SPEND_X_GET_DISCOUNT,
            self::TYPE_SIMPLE_DISCOUNT,
            self::TYPE_ADVANCED_DISCOUNT,
            self::TYPE_BUY_X_GET_Y_FREE,
            self::TYPE_BUY_X_GET_DISCOUNT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['items_to_buy'] = isset($data['items_to_buy']) ? $data['items_to_buy'] : null;
        $this->container['items_to_get'] = isset($data['items_to_get']) ? $data['items_to_get'] : null;
        $this->container['percent_off'] = isset($data['percent_off']) ? $data['percent_off'] : null;
        $this->container['fixed_off'] = isset($data['fixed_off']) ? $data['fixed_off'] : null;
        $this->container['spend_amount'] = isset($data['spend_amount']) ? $data['spend_amount'] : null;
        $this->container['num_times_to_apply'] = isset($data['num_times_to_apply']) ? $data['num_times_to_apply'] : null;
        $this->container['coupon_code'] = isset($data['coupon_code']) ? $data['coupon_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['coupon_spend_amount'] = isset($data['coupon_spend_amount']) ? $data['coupon_spend_amount'] : null;
        $this->container['show_on_receipt'] = isset($data['show_on_receipt']) ? $data['show_on_receipt'] : null;
        $this->container['item_ids'] = isset($data['item_ids']) ? $data['item_ids'] : null;
        $this->container['item_kit_ids'] = isset($data['item_kit_ids']) ? $data['item_kit_ids'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['category_ids'] = isset($data['category_ids']) ? $data['category_ids'] : null;
        $this->container['manufacturer_ids'] = isset($data['manufacturer_ids']) ? $data['manufacturer_ids'] : null;
        $this->container['price_breaks'] = isset($data['price_breaks']) ? $data['price_breaks'] : null;
        $this->container['location_ids'] = isset($data['location_ids']) ? $data['location_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets items_to_buy
     *
     * @return int|null
     */
    public function getItemsToBuy()
    {
        return $this->container['items_to_buy'];
    }

    /**
     * Sets items_to_buy
     *
     * @param int|null $items_to_buy items_to_buy
     *
     * @return $this
     */
    public function setItemsToBuy($items_to_buy)
    {
        $this->container['items_to_buy'] = $items_to_buy;

        return $this;
    }

    /**
     * Gets items_to_get
     *
     * @return int|null
     */
    public function getItemsToGet()
    {
        return $this->container['items_to_get'];
    }

    /**
     * Sets items_to_get
     *
     * @param int|null $items_to_get items_to_get
     *
     * @return $this
     */
    public function setItemsToGet($items_to_get)
    {
        $this->container['items_to_get'] = $items_to_get;

        return $this;
    }

    /**
     * Gets percent_off
     *
     * @return float|null
     */
    public function getPercentOff()
    {
        return $this->container['percent_off'];
    }

    /**
     * Sets percent_off
     *
     * @param float|null $percent_off percent_off
     *
     * @return $this
     */
    public function setPercentOff($percent_off)
    {
        $this->container['percent_off'] = $percent_off;

        return $this;
    }

    /**
     * Gets fixed_off
     *
     * @return float|null
     */
    public function getFixedOff()
    {
        return $this->container['fixed_off'];
    }

    /**
     * Sets fixed_off
     *
     * @param float|null $fixed_off fixed_off
     *
     * @return $this
     */
    public function setFixedOff($fixed_off)
    {
        $this->container['fixed_off'] = $fixed_off;

        return $this;
    }

    /**
     * Gets spend_amount
     *
     * @return float|null
     */
    public function getSpendAmount()
    {
        return $this->container['spend_amount'];
    }

    /**
     * Sets spend_amount
     *
     * @param float|null $spend_amount spend_amount
     *
     * @return $this
     */
    public function setSpendAmount($spend_amount)
    {
        $this->container['spend_amount'] = $spend_amount;

        return $this;
    }

    /**
     * Gets num_times_to_apply
     *
     * @return int|null
     */
    public function getNumTimesToApply()
    {
        return $this->container['num_times_to_apply'];
    }

    /**
     * Sets num_times_to_apply
     *
     * @param int|null $num_times_to_apply num_times_to_apply
     *
     * @return $this
     */
    public function setNumTimesToApply($num_times_to_apply)
    {
        $this->container['num_times_to_apply'] = $num_times_to_apply;

        return $this;
    }

    /**
     * Gets coupon_code
     *
     * @return string|null
     */
    public function getCouponCode()
    {
        return $this->container['coupon_code'];
    }

    /**
     * Sets coupon_code
     *
     * @param string|null $coupon_code coupon_code
     *
     * @return $this
     */
    public function setCouponCode($coupon_code)
    {
        $this->container['coupon_code'] = $coupon_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets coupon_spend_amount
     *
     * @return float|null
     */
    public function getCouponSpendAmount()
    {
        return $this->container['coupon_spend_amount'];
    }

    /**
     * Sets coupon_spend_amount
     *
     * @param float|null $coupon_spend_amount coupon_spend_amount
     *
     * @return $this
     */
    public function setCouponSpendAmount($coupon_spend_amount)
    {
        $this->container['coupon_spend_amount'] = $coupon_spend_amount;

        return $this;
    }

    /**
     * Gets show_on_receipt
     *
     * @return bool|null
     */
    public function getShowOnReceipt()
    {
        return $this->container['show_on_receipt'];
    }

    /**
     * Sets show_on_receipt
     *
     * @param bool|null $show_on_receipt show_on_receipt
     *
     * @return $this
     */
    public function setShowOnReceipt($show_on_receipt)
    {
        $this->container['show_on_receipt'] = $show_on_receipt;

        return $this;
    }

    /**
     * Gets item_ids
     *
     * @return int[]|null
     */
    public function getItemIds()
    {
        return $this->container['item_ids'];
    }

    /**
     * Sets item_ids
     *
     * @param int[]|null $item_ids item_ids
     *
     * @return $this
     */
    public function setItemIds($item_ids)
    {
        $this->container['item_ids'] = $item_ids;

        return $this;
    }

    /**
     * Gets item_kit_ids
     *
     * @return int[]|null
     */
    public function getItemKitIds()
    {
        return $this->container['item_kit_ids'];
    }

    /**
     * Sets item_kit_ids
     *
     * @param int[]|null $item_kit_ids item_kit_ids
     *
     * @return $this
     */
    public function setItemKitIds($item_kit_ids)
    {
        $this->container['item_kit_ids'] = $item_kit_ids;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets category_ids
     *
     * @return int[]|null
     */
    public function getCategoryIds()
    {
        return $this->container['category_ids'];
    }

    /**
     * Sets category_ids
     *
     * @param int[]|null $category_ids category_ids
     *
     * @return $this
     */
    public function setCategoryIds($category_ids)
    {
        $this->container['category_ids'] = $category_ids;

        return $this;
    }

    /**
     * Gets manufacturer_ids
     *
     * @return int[]|null
     */
    public function getManufacturerIds()
    {
        return $this->container['manufacturer_ids'];
    }

    /**
     * Sets manufacturer_ids
     *
     * @param int[]|null $manufacturer_ids manufacturer_ids
     *
     * @return $this
     */
    public function setManufacturerIds($manufacturer_ids)
    {
        $this->container['manufacturer_ids'] = $manufacturer_ids;

        return $this;
    }

    /**
     * Gets price_breaks
     *
     * @return \OpenAPI\Client\Model\PriceRulePriceBreak[]|null
     */
    public function getPriceBreaks()
    {
        return $this->container['price_breaks'];
    }

    /**
     * Sets price_breaks
     *
     * @param \OpenAPI\Client\Model\PriceRulePriceBreak[]|null $price_breaks price_breaks
     *
     * @return $this
     */
    public function setPriceBreaks($price_breaks)
    {
        $this->container['price_breaks'] = $price_breaks;

        return $this;
    }

    /**
     * Gets location_ids
     *
     * @return int[]|null
     */
    public function getLocationIds()
    {
        return $this->container['location_ids'];
    }

    /**
     * Sets location_ids
     *
     * @param int[]|null $location_ids location_ids
     *
     * @return $this
     */
    public function setLocationIds($location_ids)
    {
        $this->container['location_ids'] = $location_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}



<?php
/**
 * NewItemVariation
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PHP Point Of Sale API
 *
 * PHP Point Of Sale API  You can find out more about PHP POS at [https://phppointofsale.com](https://phppointofsale.com)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@phppointofsale.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NewItemVariation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NewItemVariation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NewItemVariation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'item_number' => 'string',
        'additional_item_numbers' => 'string[]',
        'unit_price' => 'float',
        'cost_price' => 'float',
        'promo_price' => 'float',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'reorder_level' => 'float',
        'replenish_level' => 'float',
        'image_url' => 'string',
        'image_title' => 'string',
        'image_alt_text' => 'string',
        'attributes' => '\OpenAPI\Client\Model\NewItemVariationAttribute[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'item_number' => null,
        'additional_item_numbers' => null,
        'unit_price' => null,
        'cost_price' => null,
        'promo_price' => 'float',
        'start_date' => 'date',
        'end_date' => 'date',
        'reorder_level' => 'float',
        'replenish_level' => 'float',
        'image_url' => null,
        'image_title' => null,
        'image_alt_text' => null,
        'attributes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'item_number' => 'item_number',
        'additional_item_numbers' => 'additional_item_numbers',
        'unit_price' => 'unit_price',
        'cost_price' => 'cost_price',
        'promo_price' => 'promo_price',
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'reorder_level' => 'reorder_level',
        'replenish_level' => 'replenish_level',
        'image_url' => 'image_url',
        'image_title' => 'image_title',
        'image_alt_text' => 'image_alt_text',
        'attributes' => 'attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'item_number' => 'setItemNumber',
        'additional_item_numbers' => 'setAdditionalItemNumbers',
        'unit_price' => 'setUnitPrice',
        'cost_price' => 'setCostPrice',
        'promo_price' => 'setPromoPrice',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'reorder_level' => 'setReorderLevel',
        'replenish_level' => 'setReplenishLevel',
        'image_url' => 'setImageUrl',
        'image_title' => 'setImageTitle',
        'image_alt_text' => 'setImageAltText',
        'attributes' => 'setAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'item_number' => 'getItemNumber',
        'additional_item_numbers' => 'getAdditionalItemNumbers',
        'unit_price' => 'getUnitPrice',
        'cost_price' => 'getCostPrice',
        'promo_price' => 'getPromoPrice',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'reorder_level' => 'getReorderLevel',
        'replenish_level' => 'getReplenishLevel',
        'image_url' => 'getImageUrl',
        'image_title' => 'getImageTitle',
        'image_alt_text' => 'getImageAltText',
        'attributes' => 'getAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['additional_item_numbers'] = isset($data['additional_item_numbers']) ? $data['additional_item_numbers'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['cost_price'] = isset($data['cost_price']) ? $data['cost_price'] : null;
        $this->container['promo_price'] = isset($data['promo_price']) ? $data['promo_price'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['reorder_level'] = isset($data['reorder_level']) ? $data['reorder_level'] : null;
        $this->container['replenish_level'] = isset($data['replenish_level']) ? $data['replenish_level'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['image_title'] = isset($data['image_title']) ? $data['image_title'] : null;
        $this->container['image_alt_text'] = isset($data['image_alt_text']) ? $data['image_alt_text'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return string|null
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param string|null $item_number item_number
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets additional_item_numbers
     *
     * @return string[]|null
     */
    public function getAdditionalItemNumbers()
    {
        return $this->container['additional_item_numbers'];
    }

    /**
     * Sets additional_item_numbers
     *
     * @param string[]|null $additional_item_numbers additional_item_numbers
     *
     * @return $this
     */
    public function setAdditionalItemNumbers($additional_item_numbers)
    {
        $this->container['additional_item_numbers'] = $additional_item_numbers;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float|null $unit_price unit_price
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return float|null
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param float|null $cost_price cost_price
     *
     * @return $this
     */
    public function setCostPrice($cost_price)
    {
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets promo_price
     *
     * @return float|null
     */
    public function getPromoPrice()
    {
        return $this->container['promo_price'];
    }

    /**
     * Sets promo_price
     *
     * @param float|null $promo_price promo_price
     *
     * @return $this
     */
    public function setPromoPrice($promo_price)
    {
        $this->container['promo_price'] = $promo_price;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets reorder_level
     *
     * @return float|null
     */
    public function getReorderLevel()
    {
        return $this->container['reorder_level'];
    }

    /**
     * Sets reorder_level
     *
     * @param float|null $reorder_level reorder_level
     *
     * @return $this
     */
    public function setReorderLevel($reorder_level)
    {
        $this->container['reorder_level'] = $reorder_level;

        return $this;
    }

    /**
     * Gets replenish_level
     *
     * @return float|null
     */
    public function getReplenishLevel()
    {
        return $this->container['replenish_level'];
    }

    /**
     * Sets replenish_level
     *
     * @param float|null $replenish_level replenish_level
     *
     * @return $this
     */
    public function setReplenishLevel($replenish_level)
    {
        $this->container['replenish_level'] = $replenish_level;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets image_title
     *
     * @return string|null
     */
    public function getImageTitle()
    {
        return $this->container['image_title'];
    }

    /**
     * Sets image_title
     *
     * @param string|null $image_title image_title
     *
     * @return $this
     */
    public function setImageTitle($image_title)
    {
        $this->container['image_title'] = $image_title;

        return $this;
    }

    /**
     * Gets image_alt_text
     *
     * @return string|null
     */
    public function getImageAltText()
    {
        return $this->container['image_alt_text'];
    }

    /**
     * Sets image_alt_text
     *
     * @param string|null $image_alt_text image_alt_text
     *
     * @return $this
     */
    public function setImageAltText($image_alt_text)
    {
        $this->container['image_alt_text'] = $image_alt_text;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\NewItemVariationAttribute[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\NewItemVariationAttribute[]|null $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}



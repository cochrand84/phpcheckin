<?php
/**
 * Expense
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PHP Point Of Sale API
 *
 * PHP Point Of Sale API  You can find out more about PHP POS at [https://phppointofsale.com](https://phppointofsale.com)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@phppointofsale.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Expense Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Expense implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Expense';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'location_id' => 'int',
        'category_id' => 'int',
        'expense_type' => 'string',
        'expense_description' => 'string',
        'expense_reason' => 'string',
        'expense_date' => '\DateTime',
        'expense_amount' => 'float',
        'expense_tax' => 'float',
        'expense_note' => 'string',
        'employee_id' => 'int',
        'approved_employee_id' => 'int',
        'expense_payment_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'location_id' => null,
        'category_id' => null,
        'expense_type' => null,
        'expense_description' => null,
        'expense_reason' => null,
        'expense_date' => 'date-time',
        'expense_amount' => 'float',
        'expense_tax' => 'float',
        'expense_note' => null,
        'employee_id' => null,
        'approved_employee_id' => null,
        'expense_payment_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'location_id' => 'location_id',
        'category_id' => 'category_id',
        'expense_type' => 'expense_type',
        'expense_description' => 'expense_description',
        'expense_reason' => 'expense_reason',
        'expense_date' => 'expense_date',
        'expense_amount' => 'expense_amount',
        'expense_tax' => 'expense_tax',
        'expense_note' => 'expense_note',
        'employee_id' => 'employee_id',
        'approved_employee_id' => 'approved_employee_id',
        'expense_payment_type' => 'expense_payment_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'location_id' => 'setLocationId',
        'category_id' => 'setCategoryId',
        'expense_type' => 'setExpenseType',
        'expense_description' => 'setExpenseDescription',
        'expense_reason' => 'setExpenseReason',
        'expense_date' => 'setExpenseDate',
        'expense_amount' => 'setExpenseAmount',
        'expense_tax' => 'setExpenseTax',
        'expense_note' => 'setExpenseNote',
        'employee_id' => 'setEmployeeId',
        'approved_employee_id' => 'setApprovedEmployeeId',
        'expense_payment_type' => 'setExpensePaymentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'location_id' => 'getLocationId',
        'category_id' => 'getCategoryId',
        'expense_type' => 'getExpenseType',
        'expense_description' => 'getExpenseDescription',
        'expense_reason' => 'getExpenseReason',
        'expense_date' => 'getExpenseDate',
        'expense_amount' => 'getExpenseAmount',
        'expense_tax' => 'getExpenseTax',
        'expense_note' => 'getExpenseNote',
        'employee_id' => 'getEmployeeId',
        'approved_employee_id' => 'getApprovedEmployeeId',
        'expense_payment_type' => 'getExpensePaymentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['expense_type'] = isset($data['expense_type']) ? $data['expense_type'] : null;
        $this->container['expense_description'] = isset($data['expense_description']) ? $data['expense_description'] : null;
        $this->container['expense_reason'] = isset($data['expense_reason']) ? $data['expense_reason'] : null;
        $this->container['expense_date'] = isset($data['expense_date']) ? $data['expense_date'] : null;
        $this->container['expense_amount'] = isset($data['expense_amount']) ? $data['expense_amount'] : null;
        $this->container['expense_tax'] = isset($data['expense_tax']) ? $data['expense_tax'] : null;
        $this->container['expense_note'] = isset($data['expense_note']) ? $data['expense_note'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['approved_employee_id'] = isset($data['approved_employee_id']) ? $data['approved_employee_id'] : null;
        $this->container['expense_payment_type'] = isset($data['expense_payment_type']) ? $data['expense_payment_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id location_id
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id category_id
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets expense_type
     *
     * @return string|null
     */
    public function getExpenseType()
    {
        return $this->container['expense_type'];
    }

    /**
     * Sets expense_type
     *
     * @param string|null $expense_type expense_type
     *
     * @return $this
     */
    public function setExpenseType($expense_type)
    {
        $this->container['expense_type'] = $expense_type;

        return $this;
    }

    /**
     * Gets expense_description
     *
     * @return string|null
     */
    public function getExpenseDescription()
    {
        return $this->container['expense_description'];
    }

    /**
     * Sets expense_description
     *
     * @param string|null $expense_description expense_description
     *
     * @return $this
     */
    public function setExpenseDescription($expense_description)
    {
        $this->container['expense_description'] = $expense_description;

        return $this;
    }

    /**
     * Gets expense_reason
     *
     * @return string|null
     */
    public function getExpenseReason()
    {
        return $this->container['expense_reason'];
    }

    /**
     * Sets expense_reason
     *
     * @param string|null $expense_reason expense_reason
     *
     * @return $this
     */
    public function setExpenseReason($expense_reason)
    {
        $this->container['expense_reason'] = $expense_reason;

        return $this;
    }

    /**
     * Gets expense_date
     *
     * @return \DateTime|null
     */
    public function getExpenseDate()
    {
        return $this->container['expense_date'];
    }

    /**
     * Sets expense_date
     *
     * @param \DateTime|null $expense_date expense_date
     *
     * @return $this
     */
    public function setExpenseDate($expense_date)
    {
        $this->container['expense_date'] = $expense_date;

        return $this;
    }

    /**
     * Gets expense_amount
     *
     * @return float|null
     */
    public function getExpenseAmount()
    {
        return $this->container['expense_amount'];
    }

    /**
     * Sets expense_amount
     *
     * @param float|null $expense_amount expense_amount
     *
     * @return $this
     */
    public function setExpenseAmount($expense_amount)
    {
        $this->container['expense_amount'] = $expense_amount;

        return $this;
    }

    /**
     * Gets expense_tax
     *
     * @return float|null
     */
    public function getExpenseTax()
    {
        return $this->container['expense_tax'];
    }

    /**
     * Sets expense_tax
     *
     * @param float|null $expense_tax expense_tax
     *
     * @return $this
     */
    public function setExpenseTax($expense_tax)
    {
        $this->container['expense_tax'] = $expense_tax;

        return $this;
    }

    /**
     * Gets expense_note
     *
     * @return string|null
     */
    public function getExpenseNote()
    {
        return $this->container['expense_note'];
    }

    /**
     * Sets expense_note
     *
     * @param string|null $expense_note expense_note
     *
     * @return $this
     */
    public function setExpenseNote($expense_note)
    {
        $this->container['expense_note'] = $expense_note;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id employee_id
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets approved_employee_id
     *
     * @return int|null
     */
    public function getApprovedEmployeeId()
    {
        return $this->container['approved_employee_id'];
    }

    /**
     * Sets approved_employee_id
     *
     * @param int|null $approved_employee_id approved_employee_id
     *
     * @return $this
     */
    public function setApprovedEmployeeId($approved_employee_id)
    {
        $this->container['approved_employee_id'] = $approved_employee_id;

        return $this;
    }

    /**
     * Gets expense_payment_type
     *
     * @return string|null
     */
    public function getExpensePaymentType()
    {
        return $this->container['expense_payment_type'];
    }

    /**
     * Sets expense_payment_type
     *
     * @param string|null $expense_payment_type expense_payment_type
     *
     * @return $this
     */
    public function setExpensePaymentType($expense_payment_type)
    {
        $this->container['expense_payment_type'] = $expense_payment_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}



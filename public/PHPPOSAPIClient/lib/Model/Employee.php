<?php
/**
 * Employee
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PHP Point Of Sale API
 *
 * PHP Point Of Sale API  You can find out more about PHP POS at [https://phppointofsale.com](https://phppointofsale.com)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@phppointofsale.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Employee Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Employee implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Employee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'person_id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'phone_number' => 'string',
        'address_1' => 'string',
        'address_2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'country' => 'string',
        'comments' => 'string',
        'custom_fields' => 'map[string,string]',
        'username' => 'string',
        'password' => 'string',
        'inactive' => 'bool',
        'reason_inactive' => 'string',
        'hire_date' => '\DateTime',
        'employee_number' => 'string',
        'birthday' => '\DateTime',
        'termination_date' => '\DateTime',
        'force_password_change' => 'bool',
        'always_require_password' => 'bool',
        'not_required_to_clock_in' => 'bool',
        'commission_percent' => 'float',
        'commission_percent_type' => 'string',
        'hourly_pay_rate' => 'float',
        'default_register_id' => 'int',
        'language' => 'string',
        'locations' => 'int[]',
        'permissions' => 'map[string,string[]]',
        'permissions_location' => 'map[string,\OpenAPI\Client\Model\LocationPermissions]',
        'image_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'person_id' => 'uuid',
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'phone_number' => null,
        'address_1' => null,
        'address_2' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'country' => null,
        'comments' => null,
        'custom_fields' => null,
        'username' => null,
        'password' => null,
        'inactive' => null,
        'reason_inactive' => null,
        'hire_date' => 'date',
        'employee_number' => null,
        'birthday' => 'date',
        'termination_date' => 'date',
        'force_password_change' => null,
        'always_require_password' => null,
        'not_required_to_clock_in' => null,
        'commission_percent' => null,
        'commission_percent_type' => null,
        'hourly_pay_rate' => null,
        'default_register_id' => null,
        'language' => null,
        'locations' => null,
        'permissions' => null,
        'permissions_location' => null,
        'image_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'person_id' => 'person_id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'email' => 'email',
        'phone_number' => 'phone_number',
        'address_1' => 'address_1',
        'address_2' => 'address_2',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'country' => 'country',
        'comments' => 'comments',
        'custom_fields' => 'custom_fields',
        'username' => 'username',
        'password' => 'password',
        'inactive' => 'inactive',
        'reason_inactive' => 'reason_inactive',
        'hire_date' => 'hire_date',
        'employee_number' => 'employee_number',
        'birthday' => 'birthday',
        'termination_date' => 'termination_date',
        'force_password_change' => 'force_password_change',
        'always_require_password' => 'always_require_password',
        'not_required_to_clock_in' => 'not_required_to_clock_in',
        'commission_percent' => 'commission_percent',
        'commission_percent_type' => 'commission_percent_type',
        'hourly_pay_rate' => 'hourly_pay_rate',
        'default_register_id' => 'default_register_id',
        'language' => 'language',
        'locations' => 'locations',
        'permissions' => 'permissions',
        'permissions_location' => 'permissions_location',
        'image_url' => 'image_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'person_id' => 'setPersonId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'phone_number' => 'setPhoneNumber',
        'address_1' => 'setAddress1',
        'address_2' => 'setAddress2',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'country' => 'setCountry',
        'comments' => 'setComments',
        'custom_fields' => 'setCustomFields',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'inactive' => 'setInactive',
        'reason_inactive' => 'setReasonInactive',
        'hire_date' => 'setHireDate',
        'employee_number' => 'setEmployeeNumber',
        'birthday' => 'setBirthday',
        'termination_date' => 'setTerminationDate',
        'force_password_change' => 'setForcePasswordChange',
        'always_require_password' => 'setAlwaysRequirePassword',
        'not_required_to_clock_in' => 'setNotRequiredToClockIn',
        'commission_percent' => 'setCommissionPercent',
        'commission_percent_type' => 'setCommissionPercentType',
        'hourly_pay_rate' => 'setHourlyPayRate',
        'default_register_id' => 'setDefaultRegisterId',
        'language' => 'setLanguage',
        'locations' => 'setLocations',
        'permissions' => 'setPermissions',
        'permissions_location' => 'setPermissionsLocation',
        'image_url' => 'setImageUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'person_id' => 'getPersonId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'phone_number' => 'getPhoneNumber',
        'address_1' => 'getAddress1',
        'address_2' => 'getAddress2',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'country' => 'getCountry',
        'comments' => 'getComments',
        'custom_fields' => 'getCustomFields',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'inactive' => 'getInactive',
        'reason_inactive' => 'getReasonInactive',
        'hire_date' => 'getHireDate',
        'employee_number' => 'getEmployeeNumber',
        'birthday' => 'getBirthday',
        'termination_date' => 'getTerminationDate',
        'force_password_change' => 'getForcePasswordChange',
        'always_require_password' => 'getAlwaysRequirePassword',
        'not_required_to_clock_in' => 'getNotRequiredToClockIn',
        'commission_percent' => 'getCommissionPercent',
        'commission_percent_type' => 'getCommissionPercentType',
        'hourly_pay_rate' => 'getHourlyPayRate',
        'default_register_id' => 'getDefaultRegisterId',
        'language' => 'getLanguage',
        'locations' => 'getLocations',
        'permissions' => 'getPermissions',
        'permissions_location' => 'getPermissionsLocation',
        'image_url' => 'getImageUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['person_id'] = isset($data['person_id']) ? $data['person_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['address_1'] = isset($data['address_1']) ? $data['address_1'] : null;
        $this->container['address_2'] = isset($data['address_2']) ? $data['address_2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['inactive'] = isset($data['inactive']) ? $data['inactive'] : null;
        $this->container['reason_inactive'] = isset($data['reason_inactive']) ? $data['reason_inactive'] : null;
        $this->container['hire_date'] = isset($data['hire_date']) ? $data['hire_date'] : null;
        $this->container['employee_number'] = isset($data['employee_number']) ? $data['employee_number'] : null;
        $this->container['birthday'] = isset($data['birthday']) ? $data['birthday'] : null;
        $this->container['termination_date'] = isset($data['termination_date']) ? $data['termination_date'] : null;
        $this->container['force_password_change'] = isset($data['force_password_change']) ? $data['force_password_change'] : null;
        $this->container['always_require_password'] = isset($data['always_require_password']) ? $data['always_require_password'] : null;
        $this->container['not_required_to_clock_in'] = isset($data['not_required_to_clock_in']) ? $data['not_required_to_clock_in'] : null;
        $this->container['commission_percent'] = isset($data['commission_percent']) ? $data['commission_percent'] : null;
        $this->container['commission_percent_type'] = isset($data['commission_percent_type']) ? $data['commission_percent_type'] : null;
        $this->container['hourly_pay_rate'] = isset($data['hourly_pay_rate']) ? $data['hourly_pay_rate'] : null;
        $this->container['default_register_id'] = isset($data['default_register_id']) ? $data['default_register_id'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['permissions_location'] = isset($data['permissions_location']) ? $data['permissions_location'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets person_id
     *
     * @return int|null
     */
    public function getPersonId()
    {
        return $this->container['person_id'];
    }

    /**
     * Sets person_id
     *
     * @param int|null $person_id person_id
     *
     * @return $this
     */
    public function setPersonId($person_id)
    {
        $this->container['person_id'] = $person_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets address_1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address_1'];
    }

    /**
     * Sets address_1
     *
     * @param string|null $address_1 address_1
     *
     * @return $this
     */
    public function setAddress1($address_1)
    {
        $this->container['address_1'] = $address_1;

        return $this;
    }

    /**
     * Gets address_2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address_2'];
    }

    /**
     * Sets address_2
     *
     * @param string|null $address_2 address_2
     *
     * @return $this
     */
    public function setAddress2($address_2)
    {
        $this->container['address_2'] = $address_2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip zip
     *
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return map[string,string]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param map[string,string]|null $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets inactive
     *
     * @return bool|null
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     *
     * @param bool|null $inactive inactive
     *
     * @return $this
     */
    public function setInactive($inactive)
    {
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets reason_inactive
     *
     * @return string|null
     */
    public function getReasonInactive()
    {
        return $this->container['reason_inactive'];
    }

    /**
     * Sets reason_inactive
     *
     * @param string|null $reason_inactive reason_inactive
     *
     * @return $this
     */
    public function setReasonInactive($reason_inactive)
    {
        $this->container['reason_inactive'] = $reason_inactive;

        return $this;
    }

    /**
     * Gets hire_date
     *
     * @return \DateTime|null
     */
    public function getHireDate()
    {
        return $this->container['hire_date'];
    }

    /**
     * Sets hire_date
     *
     * @param \DateTime|null $hire_date hire_date
     *
     * @return $this
     */
    public function setHireDate($hire_date)
    {
        $this->container['hire_date'] = $hire_date;

        return $this;
    }

    /**
     * Gets employee_number
     *
     * @return string|null
     */
    public function getEmployeeNumber()
    {
        return $this->container['employee_number'];
    }

    /**
     * Sets employee_number
     *
     * @param string|null $employee_number employee_number
     *
     * @return $this
     */
    public function setEmployeeNumber($employee_number)
    {
        $this->container['employee_number'] = $employee_number;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return \DateTime|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param \DateTime|null $birthday birthday
     *
     * @return $this
     */
    public function setBirthday($birthday)
    {
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets termination_date
     *
     * @return \DateTime|null
     */
    public function getTerminationDate()
    {
        return $this->container['termination_date'];
    }

    /**
     * Sets termination_date
     *
     * @param \DateTime|null $termination_date termination_date
     *
     * @return $this
     */
    public function setTerminationDate($termination_date)
    {
        $this->container['termination_date'] = $termination_date;

        return $this;
    }

    /**
     * Gets force_password_change
     *
     * @return bool|null
     */
    public function getForcePasswordChange()
    {
        return $this->container['force_password_change'];
    }

    /**
     * Sets force_password_change
     *
     * @param bool|null $force_password_change force_password_change
     *
     * @return $this
     */
    public function setForcePasswordChange($force_password_change)
    {
        $this->container['force_password_change'] = $force_password_change;

        return $this;
    }

    /**
     * Gets always_require_password
     *
     * @return bool|null
     */
    public function getAlwaysRequirePassword()
    {
        return $this->container['always_require_password'];
    }

    /**
     * Sets always_require_password
     *
     * @param bool|null $always_require_password always_require_password
     *
     * @return $this
     */
    public function setAlwaysRequirePassword($always_require_password)
    {
        $this->container['always_require_password'] = $always_require_password;

        return $this;
    }

    /**
     * Gets not_required_to_clock_in
     *
     * @return bool|null
     */
    public function getNotRequiredToClockIn()
    {
        return $this->container['not_required_to_clock_in'];
    }

    /**
     * Sets not_required_to_clock_in
     *
     * @param bool|null $not_required_to_clock_in not_required_to_clock_in
     *
     * @return $this
     */
    public function setNotRequiredToClockIn($not_required_to_clock_in)
    {
        $this->container['not_required_to_clock_in'] = $not_required_to_clock_in;

        return $this;
    }

    /**
     * Gets commission_percent
     *
     * @return float|null
     */
    public function getCommissionPercent()
    {
        return $this->container['commission_percent'];
    }

    /**
     * Sets commission_percent
     *
     * @param float|null $commission_percent commission_percent
     *
     * @return $this
     */
    public function setCommissionPercent($commission_percent)
    {
        $this->container['commission_percent'] = $commission_percent;

        return $this;
    }

    /**
     * Gets commission_percent_type
     *
     * @return string|null
     */
    public function getCommissionPercentType()
    {
        return $this->container['commission_percent_type'];
    }

    /**
     * Sets commission_percent_type
     *
     * @param string|null $commission_percent_type commission_percent_type
     *
     * @return $this
     */
    public function setCommissionPercentType($commission_percent_type)
    {
        $this->container['commission_percent_type'] = $commission_percent_type;

        return $this;
    }

    /**
     * Gets hourly_pay_rate
     *
     * @return float|null
     */
    public function getHourlyPayRate()
    {
        return $this->container['hourly_pay_rate'];
    }

    /**
     * Sets hourly_pay_rate
     *
     * @param float|null $hourly_pay_rate hourly_pay_rate
     *
     * @return $this
     */
    public function setHourlyPayRate($hourly_pay_rate)
    {
        $this->container['hourly_pay_rate'] = $hourly_pay_rate;

        return $this;
    }

    /**
     * Gets default_register_id
     *
     * @return int|null
     */
    public function getDefaultRegisterId()
    {
        return $this->container['default_register_id'];
    }

    /**
     * Sets default_register_id
     *
     * @param int|null $default_register_id default_register_id
     *
     * @return $this
     */
    public function setDefaultRegisterId($default_register_id)
    {
        $this->container['default_register_id'] = $default_register_id;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return int[]|null
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param int[]|null $locations locations
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return map[string,string[]]|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param map[string,string[]]|null $permissions permissions
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets permissions_location
     *
     * @return map[string,\OpenAPI\Client\Model\LocationPermissions]|null
     */
    public function getPermissionsLocation()
    {
        return $this->container['permissions_location'];
    }

    /**
     * Sets permissions_location
     *
     * @param map[string,\OpenAPI\Client\Model\LocationPermissions]|null $permissions_location permissions_location
     *
     * @return $this
     */
    public function setPermissionsLocation($permissions_location)
    {
        $this->container['permissions_location'] = $permissions_location;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


